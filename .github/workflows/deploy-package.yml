name: Deploy Package

on:
  workflow_dispatch:
    inputs:
      package_name:
        description: Nombre del package a promover
        required: true
      plan:
        description: Plan de promoción (desde dev)
        type: choice
        options: [dev-to-qa, dev-qa-prod]
        default: dev-to-qa

permissions:
  contents: write
  issues: write

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Validar inputs y variables
        run: |
          echo "package_name=${{ inputs.package_name }}"
          echo "plan=${{ inputs.plan }}"
          if [ -z "${{ vars.APP_UUID }}" ]; then
            echo "❌ Falta la variable de repositorio APP_UUID. Defínela en Settings > Secrets and variables > Variables." >&2
            exit 1
          fi

  export:
    needs: validate
    uses: vrgroup-lab/appian-cicd-core/.github/workflows/export.yml@icfbuild
    secrets: inherit
    with:
      env: dev
      deploy_kind: package
      app_uuid: ${{ vars.APP_UUID }}
      package_name: ${{ inputs.package_name }}

  archive_export:
    name: Procesar artefactos de export e ICF
    needs: export
    runs-on: ubuntu-latest
    outputs:
      artifact_dir: ${{ steps.publish.outputs.artifact_dir }}
      metadata_path: ${{ steps.publish.outputs.metadata_path }}
      icf_template_path: ${{ steps.prepare_icf.outputs.icf_template_path }}
      icf_template_content_b64: ${{ steps.prepare_icf.outputs.icf_template_content_b64 }}
      icf_overrides_json_b64: ${{ steps.prepare_icf.outputs.icf_overrides_json_b64 }}
      icf_template_source: ${{ steps.prepare_icf.outputs.icf_template_source }}
      icf_template_status: ${{ steps.prepare_icf.outputs.icf_template_status }}
      icf_template_file: ${{ steps.prepare_icf.outputs.icf_template_file }}
      icf_issue_number: ${{ steps.raise.outputs.issue_number }}
      icf_issue_url: ${{ steps.raise.outputs.issue_url }}
      package_artifact_name: ${{ steps.locate_package.outputs.package_artifact_name }}
      package_file_name: ${{ steps.locate_package.outputs.package_file_name }}
      package_status: ${{ steps.locate_package.outputs.package_status }}
    steps:
      - name: Checkout sandbox
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Preparar carpeta destino
        id: prep
        env:
          EXPORT_ARTIFACT_NAME: ${{ needs.export.outputs.artifact_name }}
        run: |
          set -euo pipefail
          name="${EXPORT_ARTIFACT_NAME}"
          if [ -z "$name" ]; then
            name="export-${GITHUB_RUN_ID}"
          fi
          dest="appian-artifacts/$name"
          mkdir -p "$dest"
          echo "dest=$dest" >> "$GITHUB_OUTPUT"

      - name: Descargar paquete principal
        if: ${{ needs.export.outputs.artifact_name != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.export.outputs.artifact_name }}
          path: ${{ steps.prep.outputs.dest }}

      - name: Descargar paquete por patrón
        if: ${{ needs.export.outputs.artifact_name == '' }}
        uses: actions/download-artifact@v4
        with:
          pattern: '*--package-*'
          path: ${{ steps.prep.outputs.dest }}/package/raw
          merge-multiple: true
        continue-on-error: true

      - name: Listar contenido descargado
        run: |
          set -euo pipefail
          echo "Contenido tras la descarga inicial:"
          ls -R "${{ steps.prep.outputs.dest }}" || true

      - name: Descargar scripts de base de datos
        if: ${{ needs.export.outputs.database_scripts != '' && needs.export.outputs.database_scripts != '[]' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ format('{0}-db-scripts', needs.export.outputs.artifact_name) }}
          path: ${{ steps.prep.outputs.dest }}/database-scripts

      - name: Descargar archivo de customización
        if: ${{ needs.export.outputs.customization_file != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ format('{0}-customization', needs.export.outputs.artifact_name) }}
          path: ${{ steps.prep.outputs.dest }}/customization

      - name: Descargar template de customización
        uses: actions/download-artifact@v4
        with:
          pattern: '*-customization-template'
          path: ${{ steps.prep.outputs.dest }}/customization-template/raw
          merge-multiple: true
        continue-on-error: true

      - name: Descargar plugins
        if: ${{ needs.export.outputs.plugins_zip != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ format('{0}-plugins', needs.export.outputs.artifact_name) }}
          path: ${{ steps.prep.outputs.dest }}/plugins

      - name: Registrar metadata de export
        env:
          DEST: ${{ steps.prep.outputs.dest }}
          ARTIFACT_NAME: ${{ needs.export.outputs.artifact_name }}
          ARTIFACT_PATH: ${{ needs.export.outputs.artifact_path }}
          ARTIFACT_DIR: ${{ needs.export.outputs.artifact_dir }}
          DATABASE_SCRIPTS: ${{ needs.export.outputs.database_scripts }}
          PLUGINS_ZIP: ${{ needs.export.outputs.plugins_zip }}
          CUSTOMIZATION_FILE: ${{ needs.export.outputs.customization_file }}
          CUSTOMIZATION_TEMPLATE: ${{ needs.export.outputs.customization_template }}
          DOWNLOADED_FILES: ${{ needs.export.outputs.downloaded_files }}
          DEPLOYMENT_UUID: ${{ needs.export.outputs.deployment_uuid }}
          DEPLOYMENT_STATUS: ${{ needs.export.outputs.deployment_status }}
        run: |
          set -euo pipefail
          dest="${DEST}/export-metadata.json"
          db_json="${DATABASE_SCRIPTS}"
          if [[ -z "$db_json" ]]; then
            db_json='[]'
          elif ! echo "$db_json" | jq empty >/dev/null 2>&1; then
            db_json='[]'
          fi
          files_json="${DOWNLOADED_FILES}"
          if [[ -z "$files_json" ]]; then
            files_json='[]'
          elif ! echo "$files_json" | jq empty >/dev/null 2>&1; then
            files_json='[]'
          fi
          mkdir -p "${DEST}"
          jq -n \
            --arg artifact_name "$ARTIFACT_NAME" \
            --arg artifact_path "$ARTIFACT_PATH" \
            --arg artifact_dir "$ARTIFACT_DIR" \
            --arg plugins_zip "$PLUGINS_ZIP" \
            --arg customization_file "$CUSTOMIZATION_FILE" \
            --arg customization_template "$CUSTOMIZATION_TEMPLATE" \
            --arg deployment_uuid "$DEPLOYMENT_UUID" \
            --arg deployment_status "$DEPLOYMENT_STATUS" \
            --argjson database_scripts "$db_json" \
            --argjson downloaded_files "$files_json" \
            '{
              artifact_name: $artifact_name,
              artifact_path: $artifact_path,
              artifact_dir: $artifact_dir,
              database_scripts: $database_scripts,
              plugins_zip: $plugins_zip,
              customization_file: $customization_file,
              customization_template: $customization_template,
              downloaded_files: $downloaded_files,
              deployment_uuid: $deployment_uuid,
              deployment_status: $deployment_status
            }' > "$dest"

      - name: Preparar plantilla ICF
        id: prepare_icf
        env:
          ARTIFACT_DIR: ${{ steps.prep.outputs.dest }}
          FALLBACK_TEMPLATE_PATH: provisioning/icf-template.properties
        run: python3 .github/scripts/prepare_icf_template.py

      - name: Publicar plantilla ICF para promoción
        if: ${{ steps.prepare_icf.outputs.icf_template_path != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: icf-template
          path: ${{ steps.prepare_icf.outputs.icf_template_path }}

      - name: Localizar paquete exportado
        id: locate_package
        env:
          DEST: ${{ steps.prep.outputs.dest }}
          EXPORT_ARTIFACT_NAME: ${{ needs.export.outputs.artifact_name }}
        run: |
          set -euo pipefail
          dir="${DEST}"
          pkg="$(find "$dir" -type f -name '*.zip' | head -n 1 || true)"
          if [ -n "$pkg" ]; then
            echo "package_path=$pkg" >> "$GITHUB_OUTPUT"
            echo "package_file_name=$(basename "$pkg")" >> "$GITHUB_OUTPUT"
            echo "package_artifact_name=promote-package" >> "$GITHUB_OUTPUT"
            echo "package_status=ready" >> "$GITHUB_OUTPUT"
            echo "Paquete encontrado en: $pkg"
          elif [ -n "$EXPORT_ARTIFACT_NAME" ]; then
            echo "package_path=" >> "$GITHUB_OUTPUT"
            echo "package_file_name=" >> "$GITHUB_OUTPUT"
            echo "package_artifact_name=$EXPORT_ARTIFACT_NAME" >> "$GITHUB_OUTPUT"
            echo "package_status=export-artifact" >> "$GITHUB_OUTPUT"
            echo "Se usará el artifact generado por export: $EXPORT_ARTIFACT_NAME"
          else
            echo "package_path=" >> "$GITHUB_OUTPUT"
            echo "package_file_name=" >> "$GITHUB_OUTPUT"
            echo "package_artifact_name=" >> "$GITHUB_OUTPUT"
            echo "package_status=missing" >> "$GITHUB_OUTPUT"
            echo "::warning::No se encontró paquete exportado en $dir ni artifact_name en el export." >&2
          fi

      - name: Publicar artefacto para promoción
        if: ${{ steps.locate_package.outputs.package_path != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: promote-package
          path: ${{ steps.locate_package.outputs.package_path }}

      - name: Publicar rutas generadas
        id: publish
        env:
          DEST: ${{ steps.prep.outputs.dest }}
        run: |
          set -euo pipefail
          echo "artifact_dir=${DEST}" >> "$GITHUB_OUTPUT"
          echo "metadata_path=${DEST}/export-metadata.json" >> "$GITHUB_OUTPUT"

      - name: Commit artefactos
        env:
          DEST: ${{ steps.prep.outputs.dest }}
          ARTIFACT_NAME: ${{ needs.export.outputs.artifact_name }}
        run: |
          set -euo pipefail
          git status --short
          git add "$DEST"
          if git diff --cached --quiet; then
            echo "Sin cambios que versionar"
            exit 0
          fi
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git commit -m "chore: almacenar artefacto $ARTIFACT_NAME"
          git push

      - name: Mostrar detalles del deployment
        run: |
          echo "deployment_uuid=${{ needs.export.outputs.deployment_uuid }}"
          echo "deployment_status=${{ needs.export.outputs.deployment_status }}"

      - name: Crear issue con guía para ICF
        id: raise
        env:
          PLAN: ${{ inputs.plan }}
          ARTIFACT_DIR: ${{ steps.publish.outputs.artifact_dir }}
          METADATA_PATH: ${{ steps.publish.outputs.metadata_path }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          TARGET_MAP: '{"dev-to-qa":["qa"],"dev-qa-prod":["qa","prod"]}'
          TEMPLATE_PATH: .github/templates/icf-issue.md
          PROVISIONING_TEMPLATE_PATH: provisioning/icf-template.properties
          ICF_TEMPLATE_PATH: ${{ steps.prepare_icf.outputs.icf_template_path }}
          ICF_TEMPLATE_CONTENT_B64: ${{ steps.prepare_icf.outputs.icf_template_content_b64 }}
          ICF_OVERRIDES_JSON_B64: ${{ steps.prepare_icf.outputs.icf_overrides_json_b64 }}
          ICF_TEMPLATE_SOURCE: ${{ steps.prepare_icf.outputs.icf_template_source }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python3 .github/scripts/create_icf_issue.py

  promote_qa:
    needs: [export, archive_export]
    runs-on: ubuntu-latest
    environment: qa
    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v4

      - name: Mostrar datos de export
        run: |
          echo "package_status=${{ needs.archive_export.outputs.package_status }}"
          echo "package_artifact_name=${{ needs.archive_export.outputs.package_artifact_name }}"
          echo "package_file_name=${{ needs.archive_export.outputs.package_file_name }}"

      - name: Resolver API Key target (QA)
        env:
          TARGET_KEY: ${{ secrets.APPIAN_QA_API_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${TARGET_KEY}" ]; then
            echo "::error::Falta definir el secreto APPIAN_QA_API_KEY en el environment 'qa'." >&2
            exit 1
          fi
          echo "::add-mask::${TARGET_KEY}"
          echo "APPIAN_API_KEY_TARGET=${TARGET_KEY}" >> "$GITHUB_ENV"

      - name: Descargar plantilla ICF
        if: ${{ needs.archive_export.outputs.icf_template_path != '' }}
        id: download_icf_template_qa
        uses: actions/download-artifact@v4
        with:
          name: icf-template
          path: ${{ runner.temp }}/icf-template

      - name: Validar artefacto de export
        run: |
          if [ -z "$PACKAGE_ARTIFACT" ]; then
            echo "❌ No se encontró paquete exportado para promover." >&2
            exit 1
          fi
        env:
          PACKAGE_ARTIFACT: ${{ needs.archive_export.outputs.package_artifact_name }}

      - name: Descargar paquete
        id: download_package
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.archive_export.outputs.package_artifact_name }}
          path: ${{ runner.temp }}/package

      - name: Determinar ruta del paquete
        id: package_path
        env:
          DOWNLOAD_DIR: ${{ steps.download_package.outputs.download-path }}
        run: |
          set -euo pipefail
          dir="${DOWNLOAD_DIR}"
          if [ -z "$dir" ]; then
            echo "No se pudo resolver la ruta de descarga del paquete." >&2
            exit 1
          fi
          pkg="$(find "$dir" -type f -name '*.zip' | head -n 1)"
          if [ -z "$pkg" ]; then
            pkg="$(find "$dir" -type f | head -n 1)"
          fi
          if [ -z "$pkg" ]; then
            echo "No se encontró el paquete exportado en $dir" >&2
            exit 1
          fi
          echo "package_path=$pkg" >> "$GITHUB_OUTPUT"

      - name: Construir ICF efímero
        id: build_icf
        uses: vrgroup-lab/appian-cicd-core/.github/actions/appian-build-icf@icfbuild
        env:
          ICF_JSON_OVERRIDES: ${{ secrets.ICF_JSON_OVERRIDES }}
        with:
          template_path: ${{ steps.download_icf_template_qa.outputs.download-path != '' && format('{0}/{1}', steps.download_icf_template_qa.outputs.download-path, needs.archive_export.outputs.icf_template_file) || 'provisioning/icf-template.properties' }}
          env: qa
          out_path: ${{ runner.temp }}/icf-qa.properties

      - name: Promover paquete
        uses: vrgroup-lab/appian-cicd-core/.github/actions/appian-promote@icfbuild
        with:
          source_env: dev
          target_env: qa
          package_path: ${{ steps.package_path.outputs.package_path }}
          icf_path: ${{ steps.build_icf.outputs.icf_path }}
        env:
          APPIAN_API_KEY_TARGET: ${{ env.APPIAN_API_KEY_TARGET }}

      - name: Cleanup ICF
        if: ${{ always() }}
        run: shred -u ${{ steps.build_icf.outputs.icf_path }} || true

  promote_prod_after_qa:
    if: ${{ inputs.plan == 'dev-qa-prod' }}
    needs: [promote_qa, export]
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v4

      - name: Resolver API Key target (Prod)
        env:
          TARGET_KEY: ${{ secrets.APPIAN_PROD_API_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${TARGET_KEY}" ]; then
            echo "::error::Falta definir el secreto APPIAN_PROD_API_KEY en el environment 'prod'." >&2
            exit 1
          fi
          echo "::add-mask::${TARGET_KEY}"
          echo "APPIAN_API_KEY_TARGET=${TARGET_KEY}" >> "$GITHUB_ENV"

      - name: Validar artefacto de export
        run: |
          if [ -z "$PACKAGE_ARTIFACT" ]; then
            echo "❌ No se encontró paquete exportado para promover." >&2
            exit 1
          fi
        env:
          PACKAGE_ARTIFACT: ${{ needs.archive_export.outputs.package_artifact_name }}

      - name: Descargar plantilla ICF
        if: ${{ needs.archive_export.outputs.icf_template_path != '' }}
        id: download_icf_template_devprod
        uses: actions/download-artifact@v4
        with:
          name: icf-template
          path: ${{ runner.temp }}/icf-template

      - name: Descargar paquete
        id: download_package
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.archive_export.outputs.package_artifact_name }}
          path: ${{ runner.temp }}/package

      - name: Determinar ruta del paquete
        id: package_path
        env:
          DOWNLOAD_DIR: ${{ steps.download_package.outputs.download-path }}
        run: |
          set -euo pipefail
          dir="${DOWNLOAD_DIR}"
          if [ -z "$dir" ]; then
            echo "No se pudo resolver la ruta de descarga del paquete." >&2
            exit 1
          fi
          pkg="$(find "$dir" -type f -name '*.zip' | head -n 1)"
          if [ -z "$pkg" ]; then
            pkg="$(find "$dir" -type f | head -n 1)"
          fi
          if [ -z "$pkg" ]; then
            echo "No se encontró el paquete exportado en $dir" >&2
            exit 1
          fi
          echo "package_path=$pkg" >> "$GITHUB_OUTPUT"

      - name: Construir ICF efímero
        id: build_icf
        uses: vrgroup-lab/appian-cicd-core/.github/actions/appian-build-icf@icfbuild
        env:
          ICF_JSON_OVERRIDES: ${{ secrets.ICF_JSON_OVERRIDES }}
        with:
          template_path: ${{ steps.download_icf_template_devprod.outputs.download-path != '' && format('{0}/{1}', steps.download_icf_template_devprod.outputs.download-path, needs.archive_export.outputs.icf_template_file) || 'provisioning/icf-template.properties' }}
          env: prod
          out_path: ${{ runner.temp }}/icf-prod.properties

      - name: Promover paquete
        uses: vrgroup-lab/appian-cicd-core/.github/actions/appian-promote@icfbuild
        with:
          source_env: dev
          target_env: prod
          package_path: ${{ steps.package_path.outputs.package_path }}
          icf_path: ${{ steps.build_icf.outputs.icf_path }}
        env:
          APPIAN_API_KEY_TARGET: ${{ env.APPIAN_API_KEY_TARGET }}

      - name: Cleanup ICF
        if: ${{ always() }}
        run: shred -u ${{ steps.build_icf.outputs.icf_path }} || true
