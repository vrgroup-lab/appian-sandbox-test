name: Deploy App

on:
  workflow_dispatch:
    inputs:
      plan:
        description: Plan de promoción (sin dev-to-prod)
        type: choice
        options: [dev-to-qa, dev-qa-prod, qa-to-prod]
        default: dev-to-qa

permissions:
  actions: write
  contents: write      # o write si lo necesitas
  pull-requests: write  # solo si el flujo crea PRs
  id-token: write 

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Validar inputs y variables
        run: |
          echo "plan=${{ inputs.plan }}"
          if [ -z "${{ vars.APP_UUID }}" ]; then
            echo "❌ Falta la variable de repositorio APP_UUID. Defínela en Settings > Secrets and variables > Variables." >&2
            exit 1
          if [ -z "${{ vars.APP_NAME }}" ]; then
            echo "❌ Falta la variable de repositorio APP_NAME. Defínela en Settings > Secrets and variables > Variables." >&2
            exit 1
          fi


  export:
    needs: validate
    uses: vrgroup-lab/appian-cicd-core/.github/workflows/export.yml@develop
    secrets: inherit
    with:
      # Si el plan es qa-to-prod, exportamos desde QA; si no, desde Dev
      env: ${{ inputs.plan == 'qa-to-prod' && 'qa' || 'dev' }}
      deploy_kind: app
      app_uuid: ${{ vars.APP_UUID }}
      app_name: ${{ vars.APP_NAME || '' }}
      dry_run: false

  archive_export:
    name: Guardar artefactos de export
    needs: export
    runs-on: ubuntu-latest
    outputs:
      artifact_dir: ${{ steps.publish.outputs.artifact_dir }}
      metadata_path: ${{ steps.publish.outputs.metadata_path }}
    steps:
      - name: Checkout sandbox
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Preparar carpeta destino
        id: prep
        env:
          EXPORT_ARTIFACT_NAME: ${{ needs.export.outputs.artifact_name }}
        run: |
          set -euo pipefail
          name="${EXPORT_ARTIFACT_NAME}"
          if [ -z "$name" ]; then
            name="export-${GITHUB_RUN_ID}"
          fi
          dest="appian-artifacts/$name"
          mkdir -p "$dest"
          echo "dest=$dest" >> "$GITHUB_OUTPUT"

      - name: Descargar paquete principal
        if: ${{ needs.export.outputs.artifact_name != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.export.outputs.artifact_name }}
          path: ${{ steps.prep.outputs.dest }}

      - name: Descargar metadata del export
        if: ${{ needs.export.outputs.artifact_name != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ format('{0}-meta', needs.export.outputs.artifact_name) }}
          path: ${{ steps.prep.outputs.dest }}

      - name: Registrar metadata de export
        env:
          DEST: ${{ steps.prep.outputs.dest }}
          ARTIFACT_NAME: ${{ needs.export.outputs.artifact_name }}
          ARTIFACT_PATH: ${{ needs.export.outputs.artifact_path }}
          ARTIFACT_DIR: ${{ needs.export.outputs.artifact_dir }}
          MANIFEST_PATH: ${{ needs.export.outputs.manifest_path }}
          RAW_RESPONSE_PATH: ${{ needs.export.outputs.raw_response_path }}
          DEPLOYMENT_UUID: ${{ needs.export.outputs.deployment_uuid }}
          DEPLOYMENT_STATUS: ${{ needs.export.outputs.deployment_status }}
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import json
          import os
          from pathlib import Path

          dest_dir = Path(os.environ["DEST"])
          metadata_path = dest_dir / "export-metadata.json"

          def resolved_path(output_value: str, fallback_name: str) -> str:
              if not output_value:
                  return str(dest_dir / fallback_name)
              candidate = Path(output_value)
              # Preserve basename but point inside DEST so that the metadata describes local copy
              return str(dest_dir / candidate.name)


          artifact_name = os.environ.get("ARTIFACT_NAME", "")
          artifact_path_output = os.environ.get("ARTIFACT_PATH", "")
          artifact_zip_name = Path(artifact_path_output).name if artifact_path_output else f"{artifact_name}.zip"

          data = {
              "artifact_name": artifact_name,
              "artifact_path": str(dest_dir / artifact_zip_name),
              "artifact_dir": str(dest_dir),
              "manifest_path": resolved_path(os.environ.get("MANIFEST_PATH", ""), "export-manifest.json"),
              "raw_response_path": resolved_path(os.environ.get("RAW_RESPONSE_PATH", ""), "export-response.json"),
              "deployment_uuid": os.environ.get("DEPLOYMENT_UUID", ""),
              "deployment_status": os.environ.get("DEPLOYMENT_STATUS", ""),
          }

          metadata_path.parent.mkdir(parents=True, exist_ok=True)
          metadata_path.write_text(json.dumps(data, indent=2), encoding="utf-8")
          PY

      - name: Publicar rutas generadas
        id: publish
        env:
          DEST: ${{ steps.prep.outputs.dest }}
        run: |
          set -euo pipefail
          echo "artifact_dir=${DEST}" >> "$GITHUB_OUTPUT"
          echo "metadata_path=${DEST}/export-metadata.json" >> "$GITHUB_OUTPUT"

      - name: Commit artefactos
        env:
          DEST: ${{ steps.prep.outputs.dest }}
          ARTIFACT_NAME: ${{ needs.export.outputs.artifact_name }}
        run: |
          set -euo pipefail
          git status --short
          git add "$DEST"
          if git diff --cached --quiet; then
            echo "Sin cambios que versionar"
            exit 0
          fi
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git commit -m "chore: almacenar artefacto $ARTIFACT_NAME"
          git push

      - name: Mostrar detalles del deployment
        run: |
          echo "deployment_uuid=${{ needs.export.outputs.deployment_uuid }}"
          echo "deployment_status=${{ needs.export.outputs.deployment_status }}"

  promote_qa:
    if: ${{ inputs.plan == 'dev-to-qa' || inputs.plan == 'dev-qa-prod' }}
    needs: [export, archive_export]
    uses: vrgroup-lab/appian-cicd-core/.github/workflows/promote.yml@develop
    secrets: inherit
    with:
      source_env: dev
      target_env: qa
      artifact_name: ${{ needs.export.outputs.artifact_name }}
      dry_run: false

  promote_prod_after_qa:
    if: ${{ inputs.plan == 'dev-qa-prod' }}
    needs: promote_qa
    uses: vrgroup-lab/appian-cicd-core/.github/workflows/promote.yml@develop
    secrets: inherit
    with:
      source_env: dev
      target_env: prod
      artifact_name: ${{ needs.export.outputs.artifact_name }}
      dry_run: false

  promote_prod_from_qa:
    if: ${{ inputs.plan == 'qa-to-prod' }}
    needs: [export, archive_export]
    uses: vrgroup-lab/appian-cicd-core/.github/workflows/promote.yml@develop
    secrets: inherit
    with:
      source_env: qa
      target_env: prod
      artifact_name: ${{ needs.export.outputs.artifact_name }}
      dry_run: false
